#!/usr/bin/env python3
"""
Interactive setup helper for BirdCam Pi configuration
Helps users create a proper .env.pi file
"""
import os
import subprocess
import sys
from pathlib import Path

def run_command(cmd):
    """Run a command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip()
    except:
        return None

def detect_cameras():
    """Detect available cameras"""
    print("\n🔍 Detecting cameras...")
    
    # Check for CSI cameras
    csi_cameras = []
    libcamera_output = run_command("libcamera-hello --list-cameras 2>&1")
    if libcamera_output and "Available cameras" in libcamera_output:
        lines = libcamera_output.split('\n')
        for i, line in enumerate(lines):
            if " : " in line and any(model in line for model in ['imx', 'ov', 'Camera']):
                # Extract camera index and model
                parts = line.split(' : ')
                if len(parts) >= 2:
                    idx = parts[0].strip()
                    model = parts[1].split('[')[0].strip()
                    csi_cameras.append({'index': idx, 'model': model, 'type': 'csi'})
    
    # Check for USB cameras - use v4l2-ctl to properly identify unique cameras
    usb_cameras = []
    usb_camera_names = {}
    
    # First, get the device list to identify unique USB cameras
    device_list = run_command("v4l2-ctl --list-devices 2>&1")
    if device_list:
        lines = device_list.split('\n')
        current_camera = None
        for line in lines:
            line = line.strip()
            if line and not line.startswith('/dev/') and '(' in line and 'usb' in line:
                # This is a USB camera name
                current_camera = line.split('(')[0].strip()
            elif line.startswith('/dev/video') and current_camera:
                # This is a video device for the current camera
                if current_camera not in usb_camera_names:
                    usb_camera_names[current_camera] = []
                usb_camera_names[current_camera].append(line)
    
    # For each unique USB camera, use the first video device
    for camera_name, devices in usb_camera_names.items():
        if devices:
            # Sort devices to ensure consistent ordering
            devices.sort()
            device = devices[0]  # Use the first device
            dev_num = device.replace('/dev/video', '')
            try:
                dev_num = int(dev_num)
                usb_cameras.append({
                    'device': dev_num, 
                    'path': device, 
                    'type': 'usb',
                    'name': camera_name
                })
            except:
                pass
    
    return csi_cameras, usb_cameras

def generate_config():
    """Interactive configuration generator"""
    print("\n🦅 BirdCam Pi Configuration Setup")
    print("=" * 50)
    
    # Get server info
    print("\n📡 AI Processing Server Configuration")
    server_ip = input("Enter your AI Processing Server IP [192.168.1.100]: ").strip()
    if not server_ip:
        server_ip = "192.168.1.100"
    
    # Detect cameras
    csi_cameras, usb_cameras = detect_cameras()
    
    print(f"\n📷 Found {len(csi_cameras)} CSI camera(s) and {len(usb_cameras)} USB camera(s)")
    
    if csi_cameras:
        print("\nCSI Cameras (Raspberry Pi Camera Modules):")
        for cam in csi_cameras:
            print(f"  - Camera {cam['index']}: {cam['model']}")
    
    if usb_cameras:
        print("\nUSB Cameras:")
        for cam in usb_cameras:
            name = cam.get('name', 'Unknown USB Camera')
            print(f"  - {name}")
            print(f"    Device: {cam['path']} (video{cam['device']})")
    
    # Camera selection
    print("\n🎯 Camera Setup")
    print("Camera 0 will be used for motion detection (this is required)")
    print("\nHow many cameras do you want to use?")
    print("1. Single camera")
    print("2. Two cameras")
    print("3. More than two cameras")
    
    choice = input("\nSelect option [1]: ").strip() or "1"
    
    config_lines = []
    config_lines.append(f"# Generated by BirdCam Setup Helper")
    config_lines.append(f"")
    config_lines.append(f"# AI Processing Server")
    config_lines.append(f"PROCESSING_SERVER={server_ip}")
    config_lines.append(f"PROCESSING_PORT=8091")
    config_lines.append(f"")
    
    if choice == "1":
        # Single camera setup
        print("\n🎥 Setting up single camera...")
        config_lines.append(f"# Single Camera Setup")
        config_lines.append(f"CAMERA_IDS=0")
        config_lines.append(f"")
        
        if csi_cameras:
            print("\nWould you like to use:")
            print("1. CSI Camera (Recommended for Raspberry Pi Camera)")
            print("2. USB Camera")
            cam_type = input("Select [1]: ").strip() or "1"
            
            if cam_type == "1":
                config_lines.append(f"# Camera 0 - CSI Camera")
                config_lines.append(f"CAMERA_0_TYPE=picamera2")
            else:
                config_lines.append(f"# Camera 0 - USB Camera")
                config_lines.append(f"CAMERA_0_TYPE=opencv")
                if usb_cameras:
                    config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device']}")
        else:
            config_lines.append(f"# Camera 0 - USB Camera")
            config_lines.append(f"CAMERA_0_TYPE=opencv")
            if usb_cameras:
                config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device']}")
    
    elif choice == "2":
        # Two camera setup
        print("\n🎥 Setting up two cameras...")
        config_lines.append(f"# Dual Camera Setup")
        config_lines.append(f"CAMERA_IDS=0,1")
        config_lines.append(f"")
        
        if csi_cameras and usb_cameras:
            print("\nRecommended setup: CSI camera for motion detection, USB as secondary")
            use_recommended = input("Use recommended setup? [Y/n]: ").strip().lower()
            
            if use_recommended != 'n':
                config_lines.append(f"# Camera 0 - CSI Camera (Motion Detection)")
                config_lines.append(f"CAMERA_0_TYPE=picamera2")
                config_lines.append(f"")
                config_lines.append(f"# Camera 1 - USB Camera (Secondary)")
                config_lines.append(f"CAMERA_1_TYPE=opencv")
                config_lines.append(f"CAMERA_1_DEVICE={usb_cameras[0]['device']}")
            else:
                # Manual setup
                print("\nConfigure Camera 0 (Motion Detection):")
                print("1. CSI Camera")
                print("2. USB Camera")
                cam0_choice = input("Select [1]: ").strip() or "1"
                
                if cam0_choice == "1":
                    config_lines.append(f"# Camera 0 - CSI Camera (Motion Detection)")
                    config_lines.append(f"CAMERA_0_TYPE=picamera2")
                    config_lines.append(f"")
                    config_lines.append(f"# Camera 1 - USB Camera")
                    config_lines.append(f"CAMERA_1_TYPE=opencv")
                    if usb_cameras:
                        config_lines.append(f"CAMERA_1_DEVICE={usb_cameras[0]['device']}")
                else:
                    config_lines.append(f"# Camera 0 - USB Camera (Motion Detection)")
                    config_lines.append(f"CAMERA_0_TYPE=opencv")
                    config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device'] if usb_cameras else 0}")
                    config_lines.append(f"")
                    config_lines.append(f"# Camera 1 - CSI Camera")
                    config_lines.append(f"CAMERA_1_TYPE=picamera2")
    
    # Video settings
    print("\n📹 Video Quality Settings")
    print("1. Low (640x480 @ 10fps) - Good for slow connections")
    print("2. Medium (1280x720 @ 15fps) - Balanced")
    print("3. High (1920x1080 @ 30fps) - Best quality")
    print("4. Custom")
    
    quality = input("Select quality [1]: ").strip() or "1"
    
    config_lines.append(f"")
    config_lines.append(f"# Video Settings")
    
    if quality == "1":
        config_lines.append(f"FPS=10")
        config_lines.append(f"RESOLUTION_WIDTH=640")
        config_lines.append(f"RESOLUTION_HEIGHT=480")
    elif quality == "2":
        config_lines.append(f"FPS=15")
        config_lines.append(f"RESOLUTION_WIDTH=1280")
        config_lines.append(f"RESOLUTION_HEIGHT=720")
    elif quality == "3":
        config_lines.append(f"FPS=30")
        config_lines.append(f"RESOLUTION_WIDTH=1920")
        config_lines.append(f"RESOLUTION_HEIGHT=1080")
    else:
        width = input("Width [640]: ").strip() or "640"
        height = input("Height [480]: ").strip() or "480"
        fps = input("FPS [10]: ").strip() or "10"
        config_lines.append(f"FPS={fps}")
        config_lines.append(f"RESOLUTION_WIDTH={width}")
        config_lines.append(f"RESOLUTION_HEIGHT={height}")
    
    # Motion detection
    config_lines.append(f"")
    config_lines.append(f"# Motion Detection")
    config_lines.append(f"MOTION_THRESHOLD=5000")
    config_lines.append(f"MIN_CONTOUR_AREA=500")
    config_lines.append(f"MOTION_TIMEOUT_SECONDS=30")
    config_lines.append(f"PRE_MOTION_BUFFER_SECONDS=15")
    
    # Storage
    config_lines.append(f"")
    config_lines.append(f"# Storage & Sync")
    config_lines.append(f"STORAGE_PATH=./bird_footage")
    config_lines.append(f"SYNC_INTERVAL_MINUTES=15")
    config_lines.append(f"PI_CLEANUP_DAYS=3")
    
    # Web & Auth
    config_lines.append(f"")
    config_lines.append(f"# Web Interface")
    config_lines.append(f"CAPTURE_PORT=8090")
    config_lines.append(f"HOST=0.0.0.0")
    config_lines.append(f"CORS_ENABLED=true")
    
    # Generate secret key
    import secrets
    secret_key = secrets.token_hex(32)
    config_lines.append(f"")
    config_lines.append(f"# Authentication - SAVE THIS KEY!")
    config_lines.append(f"SECRET_KEY={secret_key}")
    
    # Multi-camera
    if choice != "1":
        config_lines.append(f"")
        config_lines.append(f"# Multi-Camera Settings")
        config_lines.append(f"CROSS_CAMERA_TRIGGER=true")
        config_lines.append(f"CROSS_TRIGGER_TIMEOUT=5.0")
    
    # Motion box
    config_lines.append(f"")
    config_lines.append(f"# Motion Detection Zone")
    config_lines.append(f"MOTION_BOX_ENABLED=true")
    config_lines.append(f"MOTION_BOX_X1=0")
    config_lines.append(f"MOTION_BOX_Y1=0")
    config_lines.append(f"MOTION_BOX_X2={config_lines[config_lines.index('RESOLUTION_WIDTH=' + width) if 'width' in locals() else config_lines[config_lines.index('RESOLUTION_WIDTH=640')]].split('=')[1]}")
    config_lines.append(f"MOTION_BOX_Y2={config_lines[config_lines.index('RESOLUTION_HEIGHT=' + height) if 'height' in locals() else config_lines[config_lines.index('RESOLUTION_HEIGHT=480')]].split('=')[1]}")
    
    # Save configuration
    print("\n💾 Configuration Summary:")
    print("-" * 50)
    for line in config_lines[:20]:  # Show first 20 lines
        print(line)
    print("...")
    
    save = input("\nSave this configuration? [Y/n]: ").strip().lower()
    if save != 'n':
        config_path = Path.home() / "birdcam" / ".env.pi"
        backup_path = Path.home() / "birdcam" / ".env.pi.backup"
        
        if config_path.exists():
            # Backup existing config
            import shutil
            shutil.copy(config_path, backup_path)
            print(f"\n✅ Backed up existing config to {backup_path}")
        
        with open(config_path, 'w') as f:
            f.write('\n'.join(config_lines))
        
        print(f"\n✅ Configuration saved to {config_path}")
        print(f"\n⚠️  IMPORTANT: Copy this SECRET_KEY to your processing server's .env:")
        print(f"    {secret_key}")
        print(f"\n🚀 Next steps:")
        print(f"1. sudo systemctl restart pi-capture")
        print(f"2. Check status: sudo systemctl status pi-capture")
        print(f"3. View logs: sudo journalctl -u pi-capture -f")
    else:
        print("\n❌ Configuration not saved")

if __name__ == "__main__":
    try:
        generate_config()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)