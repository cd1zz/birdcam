#!/usr/bin/env python3
"""
Interactive setup helper for BirdCam Pi configuration
Helps users create a proper .env.pi file
"""
import os
import subprocess
import sys
from pathlib import Path

def run_command(cmd):
    """Run a command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip()
    except:
        return None

def detect_cameras():
    """Detect available cameras"""
    print("\n🔍 Detecting cameras...")
    
    # Check for CSI cameras
    csi_cameras = []
    libcamera_output = run_command("libcamera-hello --list-cameras 2>&1")
    if libcamera_output and "Available cameras" in libcamera_output:
        lines = libcamera_output.split('\n')
        for i, line in enumerate(lines):
            if " : " in line and any(model in line for model in ['imx', 'ov', 'Camera']):
                # Extract camera index and model
                parts = line.split(' : ')
                if len(parts) >= 2:
                    idx = parts[0].strip()
                    model = parts[1].split('[')[0].strip()
                    csi_cameras.append({'index': idx, 'model': model, 'type': 'csi'})
    
    # Check for USB cameras - use v4l2-ctl to properly identify unique cameras
    usb_cameras = []
    usb_camera_names = {}
    
    # First, get the device list to identify unique USB cameras
    device_list = run_command("v4l2-ctl --list-devices 2>&1")
    if device_list:
        lines = device_list.split('\n')
        current_camera = None
        for line in lines:
            line = line.strip()
            if line and not line.startswith('/dev/') and '(' in line and 'usb' in line:
                # This is a USB camera name
                current_camera = line.split('(')[0].strip()
            elif line.startswith('/dev/video') and current_camera:
                # This is a video device for the current camera
                if current_camera not in usb_camera_names:
                    usb_camera_names[current_camera] = []
                usb_camera_names[current_camera].append(line)
    
    # For each unique USB camera, use the first video device
    for camera_name, devices in usb_camera_names.items():
        if devices:
            # Sort devices to ensure consistent ordering
            devices.sort()
            device = devices[0]  # Use the first device
            dev_num = device.replace('/dev/video', '')
            try:
                dev_num = int(dev_num)
                usb_cameras.append({
                    'device': dev_num, 
                    'path': device, 
                    'type': 'usb',
                    'name': camera_name
                })
            except:
                pass
    
    return csi_cameras, usb_cameras

def generate_config():
    """Interactive configuration generator"""
    print("\n🦅 BirdCam Pi Configuration Setup")
    print("=" * 50)
    
    # Get server info
    print("\n📡 AI Processing Server Configuration")
    server_ip = input("Enter your AI Processing Server IP [192.168.1.100]: ").strip()
    if not server_ip:
        server_ip = "192.168.1.100"
    
    # Detect cameras
    csi_cameras, usb_cameras = detect_cameras()
    
    print(f"\n📷 Found {len(csi_cameras)} CSI camera(s) and {len(usb_cameras)} USB camera(s)")
    
    if csi_cameras:
        print("\nCSI Cameras (Raspberry Pi Camera Modules):")
        for cam in csi_cameras:
            print(f"  - Camera {cam['index']}: {cam['model']}")
    
    if usb_cameras:
        print("\nUSB Cameras:")
        for cam in usb_cameras:
            name = cam.get('name', 'Unknown USB Camera')
            print(f"  - {name}")
            print(f"    Device: {cam['path']} (video{cam['device']})")
    
    # Camera selection
    print("\n🎯 Camera Setup")
    print("Note: In BirdCam, 'Camera 0' is always the primary motion detection camera.")
    print("This is a software ID, not related to physical connections.")
    print("\nYou can assign ANY physical camera (CSI or USB) to be 'Camera 0'.")
    
    print("\nHow many cameras do you want to use?")
    print("1. Single camera")
    print("2. Two cameras")
    print("3. More than two cameras")
    
    choice = input("\nSelect option [1]: ").strip() or "1"
    
    config_lines = []
    config_lines.append(f"# Generated by BirdCam Setup Helper")
    config_lines.append(f"")
    config_lines.append(f"# AI Processing Server")
    config_lines.append(f"PROCESSING_SERVER={server_ip}")
    config_lines.append(f"PROCESSING_PORT=8091")
    config_lines.append(f"")
    
    if choice == "1":
        # Single camera setup
        print("\n🎥 Setting up single camera...")
        config_lines.append(f"# Single Camera Setup")
        config_lines.append(f"CAMERA_IDS=0")
        config_lines.append(f"")
        
        if csi_cameras and usb_cameras:
            print("\nWhich physical camera should be used as Camera 0 (motion detection)?")
            print(f"1. CSI Camera ({csi_cameras[0]['model']}) - Recommended")
            print(f"2. USB Camera ({usb_cameras[0]['name']})")
            cam_type = input("Select [1]: ").strip() or "1"
            
            if cam_type == "1":
                config_lines.append(f"# Camera 0 - Using CSI Camera for motion detection")
                config_lines.append(f"CAMERA_0_TYPE=picamera2")
            else:
                config_lines.append(f"# Camera 0 - Using USB Camera for motion detection")
                config_lines.append(f"CAMERA_0_TYPE=opencv")
                config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device']}")
        elif csi_cameras:
            config_lines.append(f"# Camera 0 - CSI Camera (only camera available)")
            config_lines.append(f"CAMERA_0_TYPE=picamera2")
            print(f"\nUsing CSI camera ({csi_cameras[0]['model']}) as Camera 0")
        else:
            config_lines.append(f"# Camera 0 - USB Camera (only camera available)")
            config_lines.append(f"CAMERA_0_TYPE=opencv")
            if usb_cameras:
                config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device']}")
                print(f"\nUsing USB camera ({usb_cameras[0]['name']}) as Camera 0")
    
    elif choice == "2":
        # Two camera setup
        print("\n🎥 Setting up two cameras...")
        config_lines.append(f"# Dual Camera Setup")
        config_lines.append(f"CAMERA_IDS=0,1")
        config_lines.append(f"")
        
        if csi_cameras and usb_cameras:
            print("\nFor dual cameras, Camera 0 will detect motion and trigger Camera 1.")
            print("\nRecommended: Use CSI camera for motion detection (better performance)")
            print(f"  Camera 0: {csi_cameras[0]['model']} (CSI) - Motion Detection")
            print(f"  Camera 1: {usb_cameras[0]['name']} (USB) - Secondary Recording")
            
            use_recommended = input("\nUse recommended setup? [Y/n]: ").strip().lower()
            
            if use_recommended != 'n':
                config_lines.append(f"# Camera 0 - CSI Camera (Motion Detection)")
                config_lines.append(f"CAMERA_0_TYPE=picamera2")
                config_lines.append(f"")
                config_lines.append(f"# Camera 1 - USB Camera (Triggered by Camera 0)")
                config_lines.append(f"CAMERA_1_TYPE=opencv")
                config_lines.append(f"CAMERA_1_DEVICE={usb_cameras[0]['device']}")
            else:
                # Manual setup
                print("\nWhich physical camera should be Camera 0 (motion detection)?")
                print(f"1. CSI Camera ({csi_cameras[0]['model']})")
                print(f"2. USB Camera ({usb_cameras[0]['name']})")
                cam0_choice = input("Select [1]: ").strip() or "1"
                
                if cam0_choice == "1":
                    config_lines.append(f"# Camera 0 - CSI Camera (Motion Detection)")
                    config_lines.append(f"CAMERA_0_TYPE=picamera2")
                    config_lines.append(f"")
                    config_lines.append(f"# Camera 1 - USB Camera (Triggered by Camera 0)")
                    config_lines.append(f"CAMERA_1_TYPE=opencv")
                    config_lines.append(f"CAMERA_1_DEVICE={usb_cameras[0]['device']}")
                    print("\n✓ Camera 0 (motion): CSI")
                    print("✓ Camera 1 (triggered): USB")
                else:
                    config_lines.append(f"# Camera 0 - USB Camera (Motion Detection)")
                    config_lines.append(f"CAMERA_0_TYPE=opencv")
                    config_lines.append(f"CAMERA_0_DEVICE={usb_cameras[0]['device']}")
                    config_lines.append(f"")
                    config_lines.append(f"# Camera 1 - CSI Camera (Triggered by Camera 0)")
                    config_lines.append(f"CAMERA_1_TYPE=picamera2")
                    print("\n✓ Camera 0 (motion): USB")
                    print("✓ Camera 1 (triggered): CSI")
    
    # Video settings
    print("\n📹 Video Quality Settings")
    print("1. Low (640x480 @ 10fps) - Good for slow connections")
    print("2. Medium (1280x720 @ 15fps) - Balanced")
    print("3. High (1920x1080 @ 30fps) - Best quality")
    print("4. Custom")
    
    quality = input("Select quality [1]: ").strip() or "1"
    
    config_lines.append(f"")
    config_lines.append(f"# Video Settings")
    
    if quality == "1":
        config_lines.append(f"FPS=10")
        config_lines.append(f"RESOLUTION_WIDTH=640")
        config_lines.append(f"RESOLUTION_HEIGHT=480")
    elif quality == "2":
        config_lines.append(f"FPS=15")
        config_lines.append(f"RESOLUTION_WIDTH=1280")
        config_lines.append(f"RESOLUTION_HEIGHT=720")
    elif quality == "3":
        config_lines.append(f"FPS=30")
        config_lines.append(f"RESOLUTION_WIDTH=1920")
        config_lines.append(f"RESOLUTION_HEIGHT=1080")
    else:
        width = input("Width [640]: ").strip() or "640"
        height = input("Height [480]: ").strip() or "480"
        fps = input("FPS [10]: ").strip() or "10"
        config_lines.append(f"FPS={fps}")
        config_lines.append(f"RESOLUTION_WIDTH={width}")
        config_lines.append(f"RESOLUTION_HEIGHT={height}")
    
    # Motion detection
    config_lines.append(f"")
    config_lines.append(f"# Motion Detection")
    config_lines.append(f"MOTION_THRESHOLD=5000")
    config_lines.append(f"MIN_CONTOUR_AREA=500")
    config_lines.append(f"MOTION_TIMEOUT_SECONDS=30")
    config_lines.append(f"PRE_MOTION_BUFFER_SECONDS=15")
    
    # Storage
    config_lines.append(f"")
    config_lines.append(f"# Storage & Sync")
    config_lines.append(f"STORAGE_PATH=./bird_footage")
    config_lines.append(f"SYNC_INTERVAL_MINUTES=15")
    config_lines.append(f"PI_CLEANUP_DAYS=3")
    
    # Web & Auth
    config_lines.append(f"")
    config_lines.append(f"# Web Interface")
    config_lines.append(f"CAPTURE_PORT=8090")
    config_lines.append(f"HOST=0.0.0.0")
    config_lines.append(f"CORS_ENABLED=true")
    
    # Generate secret key
    import secrets
    secret_key = secrets.token_hex(32)
    config_lines.append(f"")
    config_lines.append(f"# Authentication - SAVE THIS KEY!")
    config_lines.append(f"SECRET_KEY={secret_key}")
    
    # Multi-camera
    if choice != "1":
        config_lines.append(f"")
        config_lines.append(f"# Multi-Camera Settings")
        config_lines.append(f"CROSS_CAMERA_TRIGGER=true")
        config_lines.append(f"CROSS_TRIGGER_TIMEOUT=5.0")
    
    # Motion box
    config_lines.append(f"")
    config_lines.append(f"# Motion Detection Zone")
    config_lines.append(f"MOTION_BOX_ENABLED=true")
    config_lines.append(f"MOTION_BOX_X1=0")
    config_lines.append(f"MOTION_BOX_Y1=0")
    
    # Get the resolution values we set earlier
    resolution_width = "640"  # Default
    resolution_height = "480"  # Default
    
    # Find the actual resolution values in config_lines
    for line in config_lines:
        if line.startswith("RESOLUTION_WIDTH="):
            resolution_width = line.split("=")[1]
        elif line.startswith("RESOLUTION_HEIGHT="):
            resolution_height = line.split("=")[1]
    
    config_lines.append(f"MOTION_BOX_X2={resolution_width}")
    config_lines.append(f"MOTION_BOX_Y2={resolution_height}")
    
    # Save configuration
    print("\n💾 Configuration Summary:")
    print("-" * 50)
    for line in config_lines[:20]:  # Show first 20 lines
        print(line)
    print("...")
    
    save = input("\nSave this configuration? [Y/n]: ").strip().lower()
    if save != 'n':
        config_path = Path.home() / "birdcam" / ".env.pi"
        backup_path = Path.home() / "birdcam" / ".env.pi.backup"
        
        if config_path.exists():
            # Backup existing config
            import shutil
            shutil.copy(config_path, backup_path)
            print(f"\n✅ Backed up existing config to {backup_path}")
        
        with open(config_path, 'w') as f:
            f.write('\n'.join(config_lines))
        
        print(f"\n✅ Configuration saved to {config_path}")
        print(f"\n⚠️  IMPORTANT: Copy this SECRET_KEY to your processing server's .env:")
        print(f"    {secret_key}")
        print(f"\n🚀 Next steps:")
        print(f"1. sudo systemctl restart pi-capture")
        print(f"2. Check status: sudo systemctl status pi-capture")
        print(f"3. View logs: sudo journalctl -u pi-capture -f")
    else:
        print("\n❌ Configuration not saved")

if __name__ == "__main__":
    try:
        generate_config()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)