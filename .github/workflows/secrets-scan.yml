name: Secret Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Scan for secrets using multiple tools
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for better detection
    
    # TruffleHog - Scans for secrets in git history
    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
    
    # GitLeaks - Fast secret scanner
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Custom pattern matching for project-specific secrets
    - name: Check for hardcoded credentials
      run: |
        # Check for common patterns
        echo "Checking for hardcoded credentials..."
        
        # Define patterns to search for
        patterns=(
          "password\s*=\s*[\"'][^\"']+[\"']"
          "api_key\s*=\s*[\"'][^\"']+[\"']"
          "secret\s*=\s*[\"'][^\"']+[\"']"
          "token\s*=\s*[\"'][^\"']+[\"']"
          "OPENAI_API_KEY\s*=\s*[\"'][^\"']+[\"']"
          "ANTHROPIC_API_KEY\s*=\s*[\"'][^\"']+[\"']"
          "AZURE_CLIENT_SECRET\s*=\s*[\"'][^\"']+[\"']"
          "AWS_SECRET_ACCESS_KEY\s*=\s*[\"'][^\"']+[\"']"
          "GITHUB_TOKEN\s*=\s*[\"'][^\"']+[\"']"
        )
        
        # Files to exclude from scanning
        exclude_patterns=(
          "*.test.ts"
          "*.test.py"
          "*.md"
          ".env.example"
          "test_*"
          "*_test.py"
        )
        
        # Build find command with exclusions
        find_cmd="find . -type f \( -name '*.py' -o -name '*.ts' -o -name '*.tsx' -o -name '*.js' -o -name '*.jsx' \)"
        for exclude in "${exclude_patterns[@]}"; do
          find_cmd="$find_cmd ! -name '$exclude'"
        done
        
        # Search for patterns
        found_secrets=false
        for pattern in "${patterns[@]}"; do
          echo "Checking for pattern: $pattern"
          # Find files matching pattern, excluding common false positives
          matches=$(eval "$find_cmd" | xargs grep -l -E "$pattern" 2>/dev/null | grep -v ".git/" | grep -v "node_modules/" | grep -v ".venv/" || true)
          
          # Filter out false positives (env var references, placeholders)
          for match in $matches; do
            # Check if the match is actually a hardcoded value (not getenv, environ, process.env, etc.)
            if grep -E "$pattern" "$match" | grep -v "os.getenv\|os.environ\|process.env\|import.meta.env\|your-.*-here\|changeme\|example\|placeholder\|mock\|dummy\|test" > /dev/null 2>&1; then
              echo "WARNING: Found potential hardcoded secret in $match matching pattern: $pattern"
              found_secrets=true
            fi
          done
        done
        
        if [ "$found_secrets" = true ]; then
          echo "::error::Potential secrets found in code. Please use environment variables instead."
          exit 1
        fi
        
        echo "No hardcoded credentials found."
    
    # Check for .env files
    - name: Ensure no .env files are committed
      run: |
        if find . -name ".env" -not -path "./.git/*" -not -path "./node_modules/*" | grep -q .; then
          echo "::error::.env file found! Never commit .env files."
          find . -name ".env" -not -path "./.git/*" -not -path "./node_modules/*"
          exit 1
        fi
        echo "No .env files found in repository."