name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.processor.txt
        pip install -r tests/requirements.txt
    
    - name: Run linting
      run: |
        pip install ruff
        ruff check .
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-ui
      run: npm ci
    
    - name: Run linting
      working-directory: ./web-ui
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./web-ui
      run: npm run test -- --run --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./web-ui/coverage
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.processor.txt
    
    - name: Install frontend dependencies
      working-directory: ./web-ui
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./web-ui
      run: npx playwright install --with-deps
    
    - name: Start backend server
      run: |
        python ai_processor/main.py &
        sleep 5
      env:
        FLASK_ENV: testing
        DATABASE_URL: sqlite:///test.db
    
    - name: Run E2E tests
      working-directory: ./web-ui
      run: npm run test:e2e
      env:
        CI: true
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: web-ui/playwright-report/
        retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.processor.txt
        pip install -r requirements.capture.txt
        pip install -r tests/requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        DATABASE_URL: sqlite:///test.db

  all-tests-pass:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, integration-tests]
    steps:
      - name: All tests passed
        run: echo "All tests passed successfully!"